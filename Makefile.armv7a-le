# Copyright (C) 2015 David Gao <davidgao1001@gmail.com>
#
# This program is free software; you can redistribute  it and/or modify it
# under  the terms of  the GNU General  Public License as published by the
# Free Software Foundation;  either version 2 of the  License, or (at your
# option) any later version.

# Makefile for ARMv7A-LE

######## BEGIN CONFIG ########
CROSS_COMPILE	=  arm-unknown-eabi-

MACH		=  zynq7000
BOARD		=  zedboard
########  END  CONFIG ########

ROOTDIR		=  $(shell pwd)
UPPERMACH	=  $(shell echo $(MACH) | tr a-z- A-Z_)

M4		=  m4
CC		=  $(CROSS_COMPILE)gcc
CPP		=  $(CROSS_COMPILE)cpp
LD		=  $(CROSS_COMPILE)ld
OBJDUMP		=  $(CROSS_COMPILE)objdump
OBJCOPY		=  $(CROSS_COMPILE)objcopy

INCFLAG		=  -I. -I./include -I./include/arch/$(ARCH)
INCFLAG		+= -I./include/arch/$(ARCH)/asm/mach-$(MACH)

CFLAGS		=  -Wall -fno-builtin -nostdinc -nostdlib -march=armv7-a -fpic
CFLAGS		+= -mlittle-endian $(INCFLAG) -DMACH_$(UPPERMACH) -O2

LDFLAGS		=  -EL -O -N

FIRMWARE_OBJS	=  firmware/arch/$(ARCH)/vector.o \
		   firmware/arch/$(ARCH)/bootasm.o \
		   firmware/arch/$(ARCH)/bootmain.o \
		   drivers/serial/uart-zynq7000.o \
		   drivers/serial/uart.o \
		   drivers/clock/gtc-a9mpcore.o \
		   drivers/sd/sd-zynq7000.o 

FIRMWARE_M4	=  firmware/arch/$(ARCH)/firmware.m4 \
		   firmware/arch/$(ARCH)/$(MACH)/chip.m4 \
		   firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/board.m4

MBR_OBJS	=  boot/arch/$(ARCH)/$(MACH)/bootmain.o

all: firmware.bin mbr.bin kern.elf kernel_test.elf

$(FIRMWARE_OBJS): EXTRA_CFLAGS = -O2

firmware.ld: $(FIRMWARE_M4)
	$(M4) firmware/arch/$(ARCH)/firmware.m4 \
	-I firmware/arch/$(ARCH)/$(MACH)/ \
	-I firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/ > $@

firmware.elf: $(FIRMWARE_OBJS) firmware.ld
	$(LD) $(LDFLAGS) -T firmware.ld -o $@ $(FIRMWARE_OBJS)

$(MBR_OBJS): EXTRA_CFLAGS := -Os

mbr.elf: $(MBR_OBJS) boot/arch/$(ARCH)/$(MACH)/mbr.ld
	$(LD) $(LDFLAGS) -T boot/arch/$(ARCH)/$(MACH)/mbr.ld -o $@ $^

INCFLAG		+= -I./kern

CFLAGS		=  -Wall -fno-builtin -nostdinc -nostdlib -march=armv7-a -fpic
CFLAGS		+= -mlittle-endian $(INCFLAG) -DMACH_$(UPPERMACH) -O2

INCLUDE_LIBS = include/
INCLUDE_SRCS = $(wildcard $(INCLUDE_LIBS)/puthex.c)
KERN_VM = $(wildcard kern/vm/*.c)
KERN_INTERRUPT = $(wildcard kern/exception/*.c)

kern_objects =  kern/exception/interrupt_asm.o \
				kern/kernel_entry.o \
				kern/arch/$(ARCH)/enable_mmu.o \
				$(KERN_VM:.c=.o) \
				$(KERN_INTERRUPT:.c=.o) \
				drivers/serial/uart.o \
				drivers/serial/uart-zynq7000.o \
				drivers/clock/gtc-a9mpcore.o \
				$(INCLUDE_SRCS:.c=.o)

kern.elf: kern_main.o $(kern_objects) kern/kern.ld
	$(LD) $(LDFLAGS) -T kern/kern.ld -o kern/kern.elf kern_main.o $(kern_objects)

kern_main.o: kern/kernel.c kern/kernel.h
	$(CC) $(CFLAGS) -c kern/kernel.c -o kern_main.o 

vm_init.o: kern/vm/page_init.c kern/vm/page_defines.h
	$(CC) $(CFLAGS) -c kern/vm/page_init.c -o vm_init.o

kernel_test.elf : kern/kernel_for_test.o $(kern_objects) kern/kern.ld
	$(LD) $(LDFLAGS) -T kern/kern.ld -o kern/kern_test.elf kern/kernel_for_test.o $(kern_objects)

clean:
	rm -f firmware.ld
	rm -rf $(FIRMWARE_OBJS) firmware.elf firmware.bin firmware.s
	rm -rf $(MBR_OBJS) mbr.elf mbr.bin mbr.s
	rm -rf $(kern_objects)

.S.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

%.s: %.elf
	$(OBJDUMP) -S $^ > $@

%.bin: %.elf
	$(OBJCOPY) -O binary -S $^ $@

.PHONY: clean
